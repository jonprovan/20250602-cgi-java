# Spring Boot will look first for an application.properties file
# if it doesn't find one with that exact name, it will look for application.yml
# both do the same exact thing, with different syntaxes
# indentations are two spaces for each "level"
# Spring Tool Suite may default to tabs, but those don't work -- delete them and replace them with spaces
# NOTE -- spring.application.name starts to MATTER with Microservices -- the names we give are what the Eureka server uses when registering services
# here, it does not matter, because we will only have ONE Eureka server
spring:
  application:
    name: eureka-server
  config:
    import: optional:file:.env[.properties]

# (see above) importing our external .env file with values we may want to hide from the public
# this particular syntax for the file location is if the .env file is in the same folder as THIS file


# Eureka configuration
# all this sets up how this server will behave within the microservices environment
# register-with-eureka -- we DO NOT want this server to register with itself as a discoverable service (default if not present = true)
# fetch-registry -- we DO NOT want this server to reach out to itself to find out what services are available (default if not present = true)
# service-url.defaultZone -- there may be multiple Eureka servers, so this sets up the fallback if a server doesn't specify which one (we only have one)
eureka:
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: ${DEFAULT_SERVICE_URL}

# 8761 is the default port for a Eureka server -- don't change it unless you absolutely need to
# note that here and above for the service URL, we're grabbing the values from our .env file
server:
  port: ${DEFAULT_PORT}